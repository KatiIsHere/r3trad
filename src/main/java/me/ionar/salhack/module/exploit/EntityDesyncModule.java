package me.ionar.salhack.module.exploit;

import me.ionar.salhack.events.network.EventNetworkPacketEvent;
import me.ionar.salhack.events.player.EventPlayerUpdate;
import me.ionar.salhack.module.Module;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.server.SPacketDestroyEntities;
import net.minecraft.network.play.server.SPacketSetPassengers;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;

public final class EntityDesyncModule extends Module {
    private Entity Riding = null;
    @EventHandler
    private final Listener<EventPlayerUpdate> OnUpdate = new Listener<>(event ->
    {
        /// We must be riding to send these packets.
        if (Riding == null)
            return;

        if (mc.player.isRiding())
            return;

        mc.player.onGround = true;

        Riding.setPosition(mc.player.posX, mc.player.posY, mc.player.posZ);

        mc.player.connection.sendPacket(new CPacketVehicleMove(Riding));
    });
    @EventHandler
    private final Listener<EventNetworkPacketEvent> PacketEvent = new Listener<>(event ->
    {
        if (event.getPacket() instanceof SPacketSetPassengers) {
            if (Riding == null)
                return;

            SPacketSetPassengers packet = (SPacketSetPassengers) event.getPacket();

            Entity en = mc.world.getEntityByID(packet.getEntityId());

            if (en == Riding) {
                for (int i : packet.getPassengerIds()) {
                    Entity ent = mc.world.getEntityByID(i);

                    if (ent == mc.player)
                        return;
                }

                SendMessage("You dismounted. RIP");
                toggle();
            }
        } else if (event.getPacket() instanceof SPacketDestroyEntities) {
            SPacketDestroyEntities packet = (SPacketDestroyEntities) event.getPacket();

            for (int entityId : packet.getEntityIDs()) {
                if (entityId == Riding.getEntityId()) {
                    SendMessage("Entity is now null SPacketDestroyEntities");
                    //  toggle();
                    return;
                }
            }
        }
    });
    @EventHandler
    private final Listener<EntityJoinWorldEvent> OnWorldEvent = new Listener<>(event ->
    {
        if (event.getEntity() == mc.player) {
            SendMessage("Joined world event!");
        }
    });

    public EntityDesyncModule() {
        super("EntityDesync", new String[]
                {"ED"}, "Clientside dismount from entity", "NONE", 0xDBAB24, ModuleType.EXPLOIT);
    }

    @Override
    public void toggleNoSave() {

    }

    @Override
    public void onEnable() {
        super.onEnable();

        if (mc.player == null) {
            Riding = null;
            toggle();
            return;
        }

        if (!mc.player.isRiding()) {
            SendMessage("You are not riding an entity.");
            Riding = null;
            toggle();
            return;
        }

        Riding = mc.player.getRidingEntity();

        mc.player.dismountRidingEntity();
        mc.world.removeEntity(Riding);
    }

    @Override
    public void onDisable() {
        super.onDisable();

        if (Riding != null) {
            Riding.isDead = false;
            if (!mc.player.isRiding()) {
                mc.world.spawnEntity(Riding);
                mc.player.startRiding(Riding, true);
            }
            Riding = null;
            SendMessage("Forced a remount.");
        }
    }
}
